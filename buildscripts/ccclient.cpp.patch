--- src/cc/CCClient.cpp.orig
+++ src/cc/CCClient.cpp
@@ -159,7 +159,7 @@
 {
 	LOG_DEBUG("CCClient::stop");
 
-    m_configPublishedOnStart = false;
+    // m_configPublishedOnStart = false;
 
     if (m_timer) {
         m_timer->stop();
@@ -218,6 +218,7 @@
 void xmrig::CCClient::publishClientStatusReport()
 {
 	LOG_DEBUG("CCClient::publishClientStatusReport");
+    bool skipCommand = false;
 
     std::string requestUrl = "/client/setClientStatus?clientId=" + m_clientStatus.getClientId();
     std::string requestBuffer = m_clientStatus.toJsonString();
@@ -233,7 +234,8 @@
         ControlCommand controlCommand;
         if (controlCommand.parseFromJsonString(res->body)) {
             if (controlCommand.getCommand() == ControlCommand::START) {
-                LOG_DEBUG("[CC-Client] Command: START received -> resume");
+              skipCommand = true;
+              // LOG_DEBUG("[CC-Client] Command: START received -> resume");
             } else if (controlCommand.getCommand() == ControlCommand::STOP) {
                 LOG_DEBUG("[CC-Client] Command: STOP received -> pause");
             } else if (controlCommand.getCommand() == ControlCommand::UPDATE_CONFIG) {
@@ -250,8 +252,10 @@
                 LOG_WARN("[CC-Client] Command: REBOOT received -> trigger reboot");
             }
 
-            for (ICommandListener *listener : m_Commandlisteners) {
-                listener->onCommandReceived(controlCommand);
+            if (!skipCommand) {
+                for (ICommandListener *listener : m_Commandlisteners) {
+                    listener->onCommandReceived(controlCommand);
+                }
             }
         } else {
             LOG_ERR("[CC-Client] Unknown command received from CC Server.");
@@ -292,6 +296,7 @@
 
                 LOG_WARN("[CC-Client] Config updated. -> reload");
             } else {
+                std::remove(m_base->config()->fileName());
                 LOG_ERR("[CC-Client] Not able to store client config to file %s.", m_base->config()->fileName().data());
             }
         } else {
@@ -307,11 +312,20 @@
     std::string requestUrl = "/client/setClientConfig?clientId=" + m_clientStatus.getClientId();
 
     std::stringstream data;
-    std::ifstream clientConfig(m_base->config()->fileName());
+    // std::ifstream clientConfig(m_base->config()->fileName());
 
-    if (clientConfig) {
-        data << clientConfig.rdbuf();
-        clientConfig.close();
+    while (true) {
+        std::ifstream clientConfig(m_base->config()->fileName());
+        if (clientConfig.good()) {
+            // LOG_WARN("breaking");
+            data << clientConfig.rdbuf();
+            clientConfig.close();
+            break;
+        } else {
+            std::this_thread::sleep_for(std::chrono::milliseconds(1000));
+            // LOG_WARN("saving configuration for publishing");
+            m_base->config()->save();
+        }
     }
 
     if (data.tellp() > 0) {
